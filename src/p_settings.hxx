#pragma once

#include <Dolphin/types.h>
#include <Dolphin/CARD.h>
#include <Dolphin/printf.h>
#include <Dolphin/string.h>

#include <JSystem/JDrama/JDRDirector.hxx>
#include <JSystem/JKernel/JKRHeap.hxx>

#include <SMS/Manager/FlagManager.hxx>
#include <SMS/GC2D/SelectGrad.hxx>
#include <SMS/MarioUtil/DrawUtil.hxx>
#include <SMS/MarioUtil/gd-reinit-gx.hxx>
#include <SMS/System/Resolution.hxx>

#include "libs/anim2d.hxx"
#include "libs/container.hxx"
#include "icons.hxx"
#include "settings.hxx"
#include "module.hxx"

using namespace BetterSMS;

s32 MountCard(const s32 channel);
s32 OpenSavedSettings(Settings::SettingsGroup &group, const s32 channel, CARDFileInfo &infoOut);
s32 UpdateSavedSettings(Settings::SettingsGroup &group, CARDFileInfo *finfo);
s32 ReadSavedSettings(Settings::SettingsGroup &group, CARDFileInfo *finfo);
s32 CloseSavedSettings(const Settings::SettingsGroup &group, CARDFileInfo *finfo);

const u8 SMS_ALIGN(32) gSaveBnr[] = {
    0x09, 0x02, 0x00, 0x60, 0x00, 0x20, 0x00, 0x00, 0x01, 0x02, 0x00, 0x53, 0x00, 0x00, 0x0c, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x06, 0x0b, 0x0b, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x05, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x10, 0x00, 0x0b, 0x0f, 0x0f, 0x14, 0x14, 0x06, 0x0f, 0x0b,
    0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x16, 0x0f, 0x06, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x0b, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0b, 0x0b, 0x00, 0x00, 0x06, 0x0c, 0x0c, 0x0f, 0x06, 0x06,
    0x00, 0x00, 0x06, 0x06, 0x06, 0x0f, 0x0c, 0x0c, 0x00, 0x00, 0x06, 0x06, 0x0f, 0x06, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x0b, 0x0f, 0x0f, 0x0b, 0x0b, 0x0f, 0x0b, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0b, 0x10, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x0b, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0b, 0x0f, 0x0f, 0x0b, 0x0b, 0x00, 0x0b, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0b, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0f,
    0x0f, 0x0b, 0x0b, 0x0b, 0x0f, 0x0f, 0x0b, 0x0b, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0b, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x0b, 0x0b, 0x0c, 0x00, 0x06, 0x0c, 0x0c, 0x0f, 0x06, 0x06, 0x0f,
    0x00, 0x06, 0x06, 0x06, 0x0f, 0x0c, 0x0c, 0x0b, 0x00, 0x06, 0x06, 0x0f, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x0c, 0x0f, 0x0c, 0x0f, 0x06, 0x0b, 0x00, 0x0b, 0x06, 0x0c, 0x14, 0x0b, 0x0f,
    0x10, 0x00, 0x0b, 0x06, 0x0b, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0b, 0x06, 0x0b, 0x00, 0x00, 0x0a,
    0x0c, 0x06, 0x00, 0x00, 0x00, 0x07, 0x11, 0x12, 0x06, 0x0b, 0x09, 0x00, 0x15, 0x13, 0x11, 0x0d,
    0x0f, 0x0c, 0x17, 0x00, 0x00, 0x00, 0x03, 0x18, 0x0f, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x07, 0x04, 0x03,
    0x07, 0x0d, 0x00, 0x0d, 0x19, 0x05, 0x19, 0x05, 0x04, 0x19, 0x19, 0x04, 0x19, 0x13, 0x08, 0x13,
    0x00, 0x00, 0x00, 0x00, 0x13, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x11, 0x11, 0x08, 0x00,
    0x15, 0x02, 0x07, 0x11, 0x18, 0x00, 0x00, 0x00, 0x05, 0x07, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x0f, 0x06, 0x00, 0x00, 0x1a, 0x06, 0x0f, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x1c, 0x1d,
    0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x06, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x1b, 0x0f,
    0x00, 0x00, 0x06, 0x06, 0x0f, 0x06, 0x1b, 0x0a, 0x00, 0x00, 0x06, 0x06, 0x06, 0x0f, 0x0b, 0x0e,
    0x0b, 0x00, 0x06, 0x0f, 0x0f, 0x06, 0x1f, 0x00, 0x0b, 0x00, 0x06, 0x0f, 0x0b, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f,
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0b, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x0f, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x06, 0x06, 0x0f, 0x06, 0x1b, 0x0a, 0x00, 0x00, 0x06, 0x06, 0x06, 0x0f, 0x0b, 0x0e, 0x00,
    0x00, 0x06, 0x0f, 0x0f, 0x06, 0x1f, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x0b, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0b, 0x06, 0x0b, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0b, 0x06, 0x0c, 0x0a, 0x06, 0x0b,
    0x00, 0x00, 0x0b, 0x0f, 0x0f, 0x0c, 0x0c, 0x0b, 0x00, 0x00, 0x0c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0c,
    0x0b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x18,
    0x0d, 0x19, 0x19, 0x0d, 0x08, 0x05, 0x07, 0x05, 0x18, 0x19, 0x03, 0x13, 0x07, 0x04, 0x11, 0x11,
    0x11, 0x0d, 0x08, 0x02, 0x02, 0x11, 0x20, 0x20, 0x04, 0x0d, 0x13, 0x21, 0x22, 0x07, 0x23, 0x24,
    0x08, 0x13, 0x19, 0x05, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x13, 0x08, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x07, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x11, 0x07, 0x08, 0x08, 0x04, 0x15, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1d, 0x0f, 0x06, 0x1f, 0x25, 0x1f, 0x06, 0x1d, 0x27, 0x1c, 0x1c, 0x27, 0x27, 0x27, 0x27, 0x00,
    0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x06, 0x0f, 0x0f, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x17, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x10, 0x17, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0f,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0b, 0x0b, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x06, 0x0f, 0x0f, 0x0b, 0x0b, 0x0b, 0x10, 0x00, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x10,
    0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x0c, 0x0c, 0x0c, 0x0f, 0x0b, 0x0f, 0x17, 0x00, 0x0c, 0x0b, 0x10, 0x00, 0x17, 0x10,
    0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x10, 0x00, 0x00, 0x15, 0x04, 0x04, 0x04, 0x0b, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x03, 0x19,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x0d, 0x13, 0x17, 0x21, 0x05, 0x26, 0x14, 0x02, 0x03, 0x05, 0x26, 0x26, 0x07, 0x26, 0x21,
    0x04, 0x00, 0x08, 0x05, 0x13, 0x13, 0x13, 0x05, 0x04, 0x15, 0x00, 0x08, 0x13, 0x13, 0x05, 0x05,
    0x11, 0x07, 0x08, 0x08, 0x04, 0x11, 0x13, 0x00, 0x04, 0x05, 0x08, 0x08, 0x01, 0x12, 0x00, 0x00,
    0x07, 0x01, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x0f, 0x0f, 0x0f, 0x0b, 0x00, 0x00, 0x06, 0x0f, 0x0c, 0x0a, 0x0c, 0x0b, 0x00, 0x00, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0b, 0x0b, 0x0b, 0x10,
    0x00, 0x00, 0x09, 0x0b, 0x06, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x10, 0x06, 0x0f, 0x0c, 0x0a, 0x0c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x0e,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x0b, 0x2c, 0x2b, 0x17, 0x00, 0x2b, 0x2c, 0x0e, 0x0e, 0x10, 0x2c, 0x00, 0x00,
    0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x2b, 0x1b, 0x00, 0x00, 0x00, 0x2c, 0x2c,
    0x2b, 0x10, 0x2c, 0x00, 0x00, 0x00, 0x0e, 0x2c, 0x2b, 0x10, 0x10, 0x2c, 0x00, 0x00, 0x2c, 0x2b,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x0b, 0x0b, 0x0b,
    0x00, 0x00, 0x00, 0x31, 0x10, 0x32, 0x32, 0x32, 0x00, 0x00, 0x17, 0x2c, 0x10, 0x10, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x21, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x16,
    0x0e, 0x33, 0x00, 0x00, 0x2c, 0x0e, 0x0e, 0x1f, 0x0e, 0x0e, 0x00, 0x00, 0x2c, 0x10, 0x10, 0x2b,
    0x0d, 0x11, 0x00, 0x00, 0x12, 0x03, 0x03, 0x28, 0x2e, 0x2f, 0x30, 0x2b, 0x00, 0x00, 0x00, 0x0a,
    0x00, 0x00, 0x2b, 0x10, 0x10, 0x00, 0x00, 0x1f, 0x16, 0x00, 0x2c, 0x10, 0x2c, 0x1f, 0x00, 0x1f,
    0x29, 0x2a, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x2c, 0x34, 0x00, 0x36, 0x0e, 0x2b, 0x2c, 0x0e,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x2c, 0x2b, 0x17, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
    0x0b, 0x00, 0x00, 0x0b, 0x06, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
    0x0f, 0x0b, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0b, 0x0c, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x06,
    0x0f, 0x0b, 0x00, 0x00, 0x0c, 0x0b, 0x00, 0x00, 0x0f, 0x0f, 0x06, 0x3a, 0x0f, 0x0c, 0x17, 0x00,
    0x0f, 0x06, 0x06, 0x06, 0x06, 0x0c, 0x3e, 0x00, 0x0f, 0x06, 0x06, 0x06, 0x06, 0x0f, 0x0a, 0x00,
    0x00, 0x0a, 0x0c, 0x06, 0x0b, 0x00, 0x00, 0x0b, 0x00, 0x10, 0x0f, 0x0f, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x0c, 0x0f, 0x0b, 0x06, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x0b, 0x0c, 0x0c, 0x10,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x2c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3d,
    0x0e, 0x0e, 0x0e, 0x2c, 0x2b, 0x37, 0x17, 0x00, 0x0e, 0x2b, 0x39, 0x1f, 0x16, 0x16, 0x00, 0x00,
    0x37, 0x37, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x37, 0x3d, 0x40, 0x42, 0x00, 0x00, 0x00,
    0x2b, 0x0e, 0x0e, 0x2c, 0x36, 0x00, 0x2b, 0x2b, 0x37, 0x2c, 0x0e, 0x2b, 0x2b, 0x3b, 0x2b, 0x37,
    0x3d, 0x2b, 0x3f, 0x3b, 0x37, 0x37, 0x2b, 0x40, 0x40, 0x37, 0x37, 0x00, 0x40, 0x37, 0x37, 0x40,
    0x00, 0x00, 0x38, 0x0e, 0x10, 0x16, 0x16, 0x21, 0x00, 0x00, 0x3c, 0x2c, 0x3b, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3d, 0x37, 0x00, 0x00, 0x41, 0x2c, 0x00, 0x00, 0x43, 0x3d, 0x00, 0x00, 0x44, 0x3f,
    0x31, 0x17, 0x00, 0x00, 0x2b, 0x0e, 0x0e, 0x2b, 0x22, 0x16, 0x00, 0x00, 0x37, 0x0e, 0x2c, 0x3d,
    0x3c, 0x3d, 0x00, 0x00, 0x3d, 0x2b, 0x2b, 0x37, 0x37, 0x40, 0x00, 0x00, 0x40, 0x37, 0x3d, 0x42,
    0x00, 0x00, 0x2b, 0x0e, 0x0e, 0x37, 0x00, 0x1f, 0x00, 0x00, 0x2b, 0x2c, 0x2c, 0x2c, 0x2b, 0x3b,
    0x00, 0x00, 0x3d, 0x37, 0x16, 0x3d, 0x2b, 0x37, 0x00, 0x00, 0x40, 0x3d, 0x00, 0x42, 0x3d, 0x37,
    0x2b, 0x39, 0x00, 0x37, 0x0e, 0x0e, 0x0e, 0x0e, 0x2b, 0x39, 0x00, 0x2b, 0x2c, 0x0e, 0x2b, 0x39,
    0x37, 0x3f, 0x00, 0x2b, 0x37, 0x37, 0x37, 0x16, 0x3d, 0x3f, 0x00, 0x3f, 0x3d, 0x37, 0x37, 0x3d,
    0x2c, 0x2b, 0x37, 0x17, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x16, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
    0x00, 0x17, 0x0f, 0x0c, 0x0a, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0b, 0x0f, 0x0b, 0x00, 0x00, 0x0b,
    0x0f, 0x1b, 0x0c, 0x0f, 0x0c, 0x00, 0x00, 0x0b, 0x0f, 0x0c, 0x0f, 0x0b, 0x00, 0x00, 0x00, 0x0b,
    0x0f, 0x0f, 0x06, 0x06, 0x06, 0x0f, 0x0f, 0x00, 0x0f, 0x24, 0x0c, 0x0f, 0x00, 0x0c, 0x0b, 0x00,
    0x0b, 0x00, 0x0c, 0x00, 0x00, 0x0b, 0x0b, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x00,
    0x00, 0x00, 0x00, 0x09, 0x00, 0x17, 0x0f, 0x0c, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x0b, 0x0f,
    0x00, 0x06, 0x0f, 0x0f, 0x0f, 0x1b, 0x0c, 0x0f, 0x00, 0x00, 0x06, 0x06, 0x0f, 0x0c, 0x0f, 0x0b,
    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x2b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x2b,
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d,
    0x3f, 0x2b, 0x3d, 0x3d, 0x16, 0x00, 0x00, 0x00, 0x46, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4b, 0x4b, 0x4b, 0x46, 0x46, 0x46, 0x00, 0x00, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x00, 0x00,
    0x3d, 0x2b, 0x2b, 0x00, 0x3d, 0x2b, 0x3f, 0x3d, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x2b, 0x46, 0x3d,
    0x4b, 0x4b, 0x4b, 0x00, 0x00, 0x4c, 0x46, 0x16, 0x4e, 0x4d, 0x4b, 0x00, 0x00, 0x16, 0x4e, 0x00,
    0x00, 0x00, 0x43, 0x43, 0x3b, 0x00, 0x16, 0x45, 0x00, 0x00, 0x47, 0x37, 0x47, 0x48, 0x20, 0x49,
    0x00, 0x00, 0x41, 0x3f, 0x47, 0x47, 0x3f, 0x3f, 0x00, 0x00, 0x16, 0x4f, 0x48, 0x48, 0x46, 0x46,
    0x3d, 0x11, 0x00, 0x00, 0x3d, 0x3f, 0x37, 0x16, 0x4a, 0x40, 0x00, 0x00, 0x2b, 0x46, 0x2b, 0x00,
    0x2b, 0x43, 0x00, 0x00, 0x48, 0x4b, 0x48, 0x00, 0x48, 0x42, 0x00, 0x00, 0x4d, 0x4e, 0x4d, 0x00,
    0x00, 0x00, 0x3d, 0x37, 0x00, 0x00, 0x3d, 0x3f, 0x00, 0x00, 0x2b, 0x2b, 0x00, 0x00, 0x3f, 0x46,
    0x00, 0x00, 0x4c, 0x46, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x4d, 0x4d, 0x00, 0x00, 0x00, 0x4d,
    0x2b, 0x42, 0x00, 0x3b, 0x2b, 0x3f, 0x2b, 0x3d, 0x3f, 0x46, 0x00, 0x16, 0x2b, 0x46, 0x3f, 0x00,
    0x4c, 0x00, 0x00, 0x00, 0x46, 0x4b, 0x4b, 0x4b, 0x16, 0x00, 0x00, 0x00, 0x4d, 0x4e, 0x4e, 0x4e,
    0x3d, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x46, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x4e, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3e, 0x1e, 0x1e, 0x31, 0x00, 0x00, 0x50, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x00, 0x00, 0x00, 0x52, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x50, 0x50, 0x1e, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0xff, 0x26, 0xd2, 0x4b, 0xcd, 0x82, 0xff, 0xd8, 0xff, 0x8d, 0xa9, 0xbf, 0xff, 0xf1,
    0xf2, 0x85, 0x84, 0x24, 0xa5, 0x79, 0xb6, 0x1f, 0xb1, 0xff, 0xde, 0x05, 0xc2, 0xbf, 0xad, 0xdf,
    0xbe, 0x5f, 0xff, 0xfe, 0xa0, 0x80, 0xf6, 0xea, 0x90, 0xaa, 0x90, 0x61, 0x84, 0x43, 0x88, 0x46,
    0xf3, 0x2f, 0xff, 0xb3, 0xa5, 0x9a, 0x8c, 0x8a, 0x9d, 0x5b, 0xa1, 0x7d, 0xa1, 0x56, 0x94, 0xcd,
    0xb6, 0x13, 0x8c, 0x86, 0x94, 0xc8, 0x90, 0x82, 0x8c, 0x68, 0x90, 0xac, 0xa4, 0xe3, 0x99, 0x3a,
    0xb4, 0xc0, 0xc9, 0x61, 0xee, 0x64, 0xcf, 0x1e, 0xca, 0xdf, 0xb9, 0xf5, 0xe7, 0x37, 0xe6, 0x88,
    0x90, 0x85, 0x9d, 0x0c, 0xbe, 0x9f, 0xc2, 0x7e, 0xb6, 0x3b, 0x9d, 0x32, 0xb1, 0xf9, 0xd7, 0x7f,
    0xd2, 0xff, 0xba, 0x5a, 0xa1, 0x36, 0x9d, 0x0a, 0xd3, 0x3f, 0xdb, 0xbf, 0x94, 0xf1, 0xc2, 0xfa,
    0xeb, 0xff, 0xa1, 0x6d, 0xba, 0x76, 0xdf, 0xdf, 0xa9, 0xaf, 0xb1, 0xf1, 0xba, 0xb9, 0xc7, 0x1b,
    0xba, 0xda, 0xc2, 0xb8, 0xcf, 0x5e, 0xae, 0x35, 0xbf, 0x1c, 0xae, 0x9a, 0x9d, 0xf2, 0xae, 0x55,
    0x9d, 0x35, 0xad, 0xd8, 0xa1, 0x51
};

const u8 SMS_ALIGN(32) gSaveIcon[] = {
    0x09, 0x02, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x01, 0x02, 0x00, 0x9d, 0x00, 0x00, 0x08, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
    0x00, 0x00, 0x00, 0x02, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x12, 0x09, 0x13, 0x14, 0x15, 0x16,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x05, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x0d, 0x0e, 0x09, 0x03, 0x00, 0x00, 0x00, 0x17, 0x0c, 0x18, 0x0a, 0x19, 0x04, 0x07, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x08, 0x00, 0x00, 0x00,
    0x07, 0x0f, 0x10, 0x11, 0x07, 0x00, 0x00, 0x00, 0x07, 0x1a, 0x1b, 0x1c, 0x07, 0x07, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f,
    0x00, 0x1d, 0x1e, 0x09, 0x1f, 0x20, 0x21, 0x21, 0x03, 0x1e, 0x1e, 0x25, 0x26, 0x0d, 0x27, 0x0d,
    0x1e, 0x2b, 0x0b, 0x25, 0x26, 0x1e, 0x0c, 0x2c, 0x2b, 0x2b, 0x1e, 0x25, 0x26, 0x30, 0x30, 0x22,
    0x0b, 0x1e, 0x15, 0x22, 0x0e, 0x19, 0x07, 0x23, 0x27, 0x14, 0x21, 0x22, 0x28, 0x29, 0x07, 0x10,
    0x20, 0x17, 0x2d, 0x18, 0x28, 0x29, 0x07, 0x1a, 0x22, 0x30, 0x30, 0x18, 0x28, 0x29, 0x07, 0x07,
    0x11, 0x1c, 0x1b, 0x10, 0x11, 0x11, 0x24, 0x00, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x24, 0x00,
    0x1c, 0x10, 0x1b, 0x1b, 0x1c, 0x2e, 0x24, 0x00, 0x07, 0x2e, 0x1b, 0x2e, 0x07, 0x07, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x2b,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1e, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x2d,
    0x2b, 0x2b, 0x2b, 0x09, 0x0a, 0x27, 0x0a, 0x0b, 0x2b, 0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x1e, 0x19, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
    0x0b, 0x0d, 0x0d, 0x0a, 0x0e, 0x29, 0x31, 0x29, 0x19, 0x19, 0x09, 0x09, 0x19, 0x29, 0x29, 0x29,
    0x29, 0x29, 0x29, 0x31, 0x31, 0x29, 0x31, 0x29, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
    0x07, 0x11, 0x10, 0x11, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
    0x29, 0x29, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x19, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x29, 0x29,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x29, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x29, 0x31,
    0x31, 0x31, 0x33, 0x34, 0x33, 0x35, 0x36, 0x36, 0x38, 0x39, 0x3a, 0x3b, 0x33, 0x3b, 0x3c, 0x3d,
    0x3e, 0x3e, 0x3d, 0x3c, 0x3f, 0x40, 0x3d, 0x41, 0x3c, 0x44, 0x45, 0x17, 0x17, 0x17, 0x3c, 0x45,
    0x36, 0x36, 0x25, 0x37, 0x33, 0x33, 0x31, 0x31, 0x3d, 0x3c, 0x35, 0x34, 0x3a, 0x33, 0x3a, 0x38,
    0x41, 0x41, 0x40, 0x35, 0x3d, 0x3e, 0x42, 0x43, 0x41, 0x3c, 0x17, 0x17, 0x17, 0x45, 0x3c, 0x3f,
    0x31, 0x31, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x31, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x29, 0x29, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x31, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x3e, 0x37,
    0x00, 0x00, 0x00, 0x00, 0x52, 0x3d, 0x3d, 0x31, 0x00, 0x00, 0x00, 0x00, 0x01, 0x48, 0x1f, 0x31,
    0x48, 0x49, 0x17, 0x17, 0x4a, 0x4b, 0x1f, 0x45, 0x2c, 0x2c, 0x17, 0x4e, 0x17, 0x4f, 0x50, 0x44,
    0x2c, 0x2c, 0x17, 0x53, 0x54, 0x34, 0x3f, 0x48, 0x48, 0x48, 0x17, 0x53, 0x51, 0x5b, 0x49, 0x49,
    0x41, 0x3c, 0x4b, 0x4a, 0x22, 0x17, 0x3c, 0x3d, 0x41, 0x3d, 0x4f, 0x17, 0x51, 0x17, 0x3c, 0x3f,
    0x45, 0x3c, 0x55, 0x56, 0x57, 0x17, 0x3c, 0x3d, 0x2c, 0x5c, 0x3d, 0x51, 0x51, 0x17, 0x3c, 0x3c,
    0x4c, 0x31, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x25, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x47, 0x58, 0x59, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x47, 0x39, 0x3e, 0x5a, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x58, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x58, 0x25,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x45,
    0x3f, 0x3f, 0x3c, 0x26, 0x48, 0x17, 0x17, 0x2c, 0x3b, 0x3a, 0x25, 0x3c, 0x2c, 0x17, 0x49, 0x5c,
    0x37, 0x34, 0x34, 0x36, 0x2c, 0x49, 0x5c, 0x44, 0x35, 0x34, 0x34, 0x3b, 0x48, 0x2c, 0x44, 0x3c,
    0x48, 0x45, 0x5e, 0x5e, 0x26, 0x5b, 0x3c, 0x36, 0x48, 0x41, 0x61, 0x62, 0x5e, 0x36, 0x3b, 0x34,
    0x3d, 0x3d, 0x61, 0x25, 0x58, 0x34, 0x34, 0x34, 0x3d, 0x64, 0x65, 0x62, 0x3b, 0x34, 0x34, 0x3b,
    0x40, 0x37, 0x3f, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x36, 0x39, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x25, 0x5e, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x36, 0x3a, 0x3a, 0x35, 0x45, 0x45, 0x3d, 0x48, 0x48, 0x3b, 0x68, 0x69, 0x58, 0x25, 0x62,
    0x66, 0x48, 0x48, 0x3e, 0x50, 0x6c, 0x6c, 0x3b, 0x00, 0x66, 0x45, 0x48, 0x45, 0x3e, 0x25, 0x50,
    0x64, 0x62, 0x65, 0x58, 0x3a, 0x34, 0x40, 0x61, 0x38, 0x6a, 0x39, 0x68, 0x68, 0x68, 0x42, 0x65,
    0x3b, 0x6c, 0x68, 0x42, 0x25, 0x42, 0x58, 0x42, 0x50, 0x35, 0x36, 0x25, 0x25, 0x58, 0x42, 0x5f,
    0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x5a, 0x50, 0x45, 0x45, 0x45, 0x45, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3f, 0x45, 0x45,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x6f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3d, 0x3e, 0x36, 0x25, 0x35, 0x6d, 0x52, 0x00, 0x3f, 0x50, 0x25, 0x6f, 0x01, 0x00, 0x00, 0x00,
    0x70, 0x6f, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x72, 0x73, 0x74,
    0x00, 0x00, 0x00, 0x72, 0x0e, 0x18, 0x0c, 0x16, 0x00, 0x00, 0x79, 0x09, 0x26, 0x2c, 0x2d, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x75, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x0d, 0x18, 0x13, 0x78, 0x00, 0x00, 0x00, 0x21, 0x1e, 0x15, 0x22, 0x19, 0x04, 0x07, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x08, 0x00, 0x00, 0x00,
    0x07, 0x0f, 0x10, 0x11, 0x07, 0x00, 0x00, 0x00, 0x07, 0x1a, 0x1b, 0x1c, 0x07, 0x07, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a,
    0x00, 0x2f, 0x1e, 0x09, 0x30, 0x27, 0x0d, 0x14, 0x78, 0x1e, 0x1e, 0x0e, 0x1f, 0x1e, 0x14, 0x17,
    0x1e, 0x2b, 0x1e, 0x09, 0x28, 0x0c, 0x1f, 0x1f, 0x2b, 0x1e, 0x1e, 0x09, 0x19, 0x7b, 0x19, 0x19,
    0x0c, 0x14, 0x2d, 0x30, 0x13, 0x29, 0x07, 0x23, 0x17, 0x22, 0x2d, 0x0c, 0x38, 0x29, 0x07, 0x10,
    0x1f, 0x26, 0x0c, 0x43, 0x19, 0x29, 0x07, 0x1a, 0x19, 0x19, 0x0e, 0x09, 0x29, 0x29, 0x07, 0x07,
    0x11, 0x1c, 0x1b, 0x10, 0x11, 0x11, 0x24, 0x00, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x24, 0x00,
    0x1c, 0x10, 0x1b, 0x1b, 0x1c, 0x2e, 0x24, 0x00, 0x07, 0x2e, 0x1b, 0x2e, 0x07, 0x07, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x1e,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x19, 0x31,
    0x2b, 0x09, 0x19, 0x29, 0x29, 0x29, 0x31, 0x31, 0x19, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x33, 0x31, 0x31, 0x6a, 0x35, 0x42, 0x42, 0x31, 0x7e, 0x33, 0x34, 0x3a, 0x35, 0x50, 0x43,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x29, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x31,
    0x42, 0x42, 0x42, 0x6a, 0x47, 0x31, 0x31, 0x31, 0x43, 0x50, 0x35, 0x3a, 0x33, 0x47, 0x38, 0x31,
    0x07, 0x11, 0x10, 0x11, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
    0x31, 0x31, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x29, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x29, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x29, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x31, 0x37,
    0x6a, 0x42, 0x33, 0x3b, 0x37, 0x37, 0x3f, 0x3d, 0x3d, 0x36, 0x3e, 0x3c, 0x3d, 0x36, 0x3d, 0x45,
    0x45, 0x48, 0x3c, 0x17, 0x17, 0x17, 0x41, 0x45, 0x2c, 0x2c, 0x17, 0x17, 0x51, 0x57, 0x3c, 0x48,
    0x3d, 0x3e, 0x3a, 0x3a, 0x3a, 0x34, 0x58, 0x6a, 0x41, 0x3f, 0x36, 0x3d, 0x3d, 0x25, 0x42, 0x36,
    0x41, 0x41, 0x17, 0x17, 0x17, 0x3c, 0x3d, 0x3e, 0x45, 0x3c, 0x57, 0x51, 0x17, 0x17, 0x3c, 0x3f,
    0x31, 0x31, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x47, 0x29, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x31, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x3e, 0x47,
    0x00, 0x00, 0x00, 0x00, 0x52, 0x45, 0x3f, 0x31, 0x00, 0x00, 0x00, 0x00, 0x01, 0x48, 0x36, 0x4c,
    0x2c, 0x2c, 0x17, 0x4e, 0x17, 0x4f, 0x1f, 0x48, 0x2c, 0x2c, 0x17, 0x51, 0x85, 0x34, 0x3f, 0x48,
    0x48, 0x48, 0x17, 0x51, 0x57, 0x26, 0x49, 0x49, 0x36, 0x40, 0x5b, 0x4e, 0x48, 0x17, 0x49, 0x2c,
    0x44, 0x3f, 0x4f, 0x17, 0x53, 0x17, 0x3c, 0x3e, 0x44, 0x3f, 0x34, 0x86, 0x51, 0x17, 0x3c, 0x3e,
    0x2c, 0x45, 0x43, 0x57, 0x51, 0x17, 0x41, 0x3d, 0x48, 0x45, 0x3c, 0x3f, 0x4e, 0x45, 0x36, 0x25,
    0x37, 0x25, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x25, 0x62, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x31, 0x40, 0x25, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x4c, 0x25, 0x5a, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6a, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x3d, 0x41,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x1f, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x48,
    0x40, 0x34, 0x37, 0x3f, 0x49, 0x49, 0x2c, 0x45, 0x40, 0x34, 0x34, 0x36, 0x2c, 0x2c, 0x45, 0x3c,
    0x3d, 0x68, 0x34, 0x42, 0x5c, 0x44, 0x3c, 0x3c, 0x5c, 0x3e, 0x3a, 0x68, 0x3f, 0x45, 0x3d, 0x3d,
    0x41, 0x41, 0x64, 0x87, 0x50, 0x6a, 0x34, 0x3b, 0x3c, 0x3d, 0x87, 0x87, 0x42, 0x34, 0x34, 0x3b,
    0x3d, 0x64, 0x87, 0x61, 0x3b, 0x34, 0x34, 0x40, 0x64, 0x64, 0x61, 0x42, 0x69, 0x34, 0x58, 0x87,
    0x25, 0x4c, 0x25, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x25, 0x62, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x65, 0x35, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5c, 0x48, 0x40, 0x3a, 0x3b, 0x25, 0x5e, 0x62, 0x5b, 0x2c, 0x48, 0x3f, 0x36, 0x3b, 0x3b, 0x3b,
    0x90, 0x45, 0x5c, 0x5c, 0x1f, 0x91, 0x92, 0x92, 0x00, 0x66, 0x41, 0x48, 0x45, 0x47, 0x38, 0x38,
    0x62, 0x38, 0x58, 0x8e, 0x3a, 0x68, 0x65, 0x65, 0x3b, 0x3b, 0x6c, 0x42, 0x35, 0x6a, 0x65, 0x42,
    0x92, 0x56, 0x93, 0x35, 0x65, 0x65, 0x6a, 0x54, 0x38, 0x38, 0x47, 0x58, 0x38, 0x6a, 0x93, 0x5f,
    0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x94, 0x3f, 0x48, 0x25, 0x29, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x95, 0x48, 0x25, 0x96,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x4d, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7b, 0x29, 0x38, 0x62, 0x58, 0x6d, 0x52, 0x00, 0x96, 0x38, 0x25, 0x97, 0x52, 0x00, 0x00, 0x00,
    0x9a, 0x9b, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x11, 0x11, 0x33, 0x13, 0x45, 0x13, 0x66, 0x00, 0x56, 0x01, 0x21, 0x12, 0x70, 0x20,
    0x60, 0x20, 0xd8, 0x00, 0xdd, 0x08, 0xe5, 0x4a, 0xee, 0x31, 0xe9, 0x8c, 0xd4, 0x41, 0x71, 0x60,
    0x9b, 0x21, 0x8e, 0x01, 0x56, 0x12, 0xd4, 0xc6, 0xf6, 0xb5, 0xf6, 0x73, 0xfe, 0xf7, 0xff, 0xff,
    0xef, 0x39, 0xc8, 0x00, 0x92, 0x41, 0x9b, 0x41, 0x96, 0xe1, 0x66, 0x12, 0xe8, 0x00, 0xea, 0x72,
    0xf7, 0xbd, 0xe4, 0x44, 0xef, 0xbd, 0x71, 0x70, 0x70, 0x30, 0xd9, 0x89, 0xe6, 0xb5, 0xe5, 0x08,
    0xd5, 0x4a, 0xb0, 0x00, 0x23, 0x13, 0xf8, 0x00, 0xff, 0x79, 0xe4, 0x42, 0x92, 0x81, 0x69, 0x00,
    0xe7, 0x7b, 0xa4, 0x00, 0x55, 0x13, 0x90, 0x00, 0x80, 0x00, 0xcd, 0x89, 0xd9, 0xca, 0xa4, 0x81,
    0xc8, 0xc4, 0xb0, 0xc4, 0x94, 0x42, 0xa4, 0xc4, 0xfe, 0xae, 0xfa, 0x6d, 0xee, 0x2c, 0xee, 0x6d,
    0xb9, 0x06, 0xfe, 0xb1, 0xc9, 0x48, 0xd9, 0xcc, 0xff, 0x33, 0xfe, 0xf3, 0x43, 0x13, 0xa4, 0x40,
    0xff, 0x36, 0xff, 0xbb, 0x9a, 0x39, 0xa1, 0xd5, 0xb0, 0xc2, 0x59, 0x76, 0xcf, 0x3d, 0x88, 0xc8,
    0xde, 0x2c, 0xb2, 0xfd, 0x10, 0x00, 0xbb, 0x3d, 0xb1, 0x4e, 0x88, 0x44, 0xc6, 0x31, 0xaa, 0x77,
    0xc9, 0x46, 0xe5, 0xc8, 0x33, 0x24, 0xee, 0xb3, 0xff, 0x77, 0x6d, 0x99, 0xee, 0x2a, 0x11, 0x12,
    0x47, 0x55, 0xed, 0x46, 0xd9, 0x46, 0x6a, 0x76, 0xf9, 0xc8, 0xd9, 0x04, 0x57, 0x55, 0x22, 0x23,
    0x94, 0x84, 0x98, 0x82, 0xc5, 0x06, 0x45, 0x45, 0x98, 0xc5, 0x55, 0x34, 0x45, 0x34, 0x55, 0x45,
    0x67, 0x55, 0x12, 0x00, 0x34, 0x00, 0x47, 0x22, 0x69, 0x65, 0x58, 0x32, 0x45, 0x00, 0x22, 0x00,
    0x46, 0x00, 0x58, 0x00, 0x6b, 0x00, 0xc8, 0x42, 0x33, 0x01, 0x53, 0x01, 0xb8, 0x84, 0x64, 0x00,
    0xa8, 0x46, 0x43, 0x35, 0x69, 0x53, 0x23, 0x32, 0x5a, 0x64, 0xb9, 0x8e, 0xa9, 0x4c, 0xfd, 0x86,
    0x45, 0x56, 0x66, 0x57, 0x32, 0x23, 0x33, 0x35, 0x54, 0x37, 0x57, 0x67, 0xa0, 0x84, 0x44, 0x37,
    0x56, 0x57, 0xcd, 0xcc, 0xd6, 0x73, 0xb9, 0x4a, 0x35, 0x34, 0x48, 0x54, 0xc4, 0x82, 0x57, 0x43,
    0x24, 0x33, 0x6b, 0x87, 0x6b, 0x64, 0x58, 0x53, 0x34, 0x32
};

static const u8 *sLoadingIconTIMGs[] = {
    gShineSpriteIconFrame1,  gShineSpriteIconFrame2,  gShineSpriteIconFrame3,
    gShineSpriteIconFrame4,  gShineSpriteIconFrame5,  gShineSpriteIconFrame6,
    gShineSpriteIconFrame7,  gShineSpriteIconFrame8,  gShineSpriteIconFrame9,
    gShineSpriteIconFrame10, gShineSpriteIconFrame11, gShineSpriteIconFrame12,
    gShineSpriteIconFrame13, gShineSpriteIconFrame14, gShineSpriteIconFrame15,
    gShineSpriteIconFrame16
};

void getSettingsGroups(TDictS<Settings::SettingsGroup *>::ItemList &out);

inline int getTextWidth(J2DTextBox *textbox) {
    const size_t textLength = strlen(textbox->mStrPtr);

    size_t textWidth = 0;
    for (int i = 0; i < textLength; ++i) {
        JUTFont::TWidth width;
        textbox->mFont->getWidthEntry(textbox->mStrPtr[i], &width);
        textWidth += width.mWidth;
    }

    return textWidth + (Max(textLength - 1, 0) * textbox->mCharSpacing);
}

inline void centerTextBoxX(J2DTextBox* textbox, int width) {
    int textWidth      = getTextWidth(textbox);
    textbox->mRect.mX1 = ((width >> 1) - (getScreenRatioAdjustX() / 2)) -
                         (getTextWidth(textbox) >> 1) - textbox->mCharSizeX - 4;
    textbox->mRect.mX2 = textbox->mRect.mX1 + textWidth + (strlen(textbox->mStrPtr) * textbox->mCharSizeX);
}

struct SettingInfo {
    J2DTextBox *mSettingTextBox;
    J2DTextBox *mSettingTextBoxBack;
    Settings::SingleSetting *mSettingData;
};

struct GroupInfo {
    J2DPane *mGroupPane;
    Settings::SettingsGroup *mSettingGroup;
    JGadget::TList<SettingInfo *> mSettingInfos;
};

class SettingsScreen;
class SaveErrorPanel;

class SettingsDirector : public JDrama::TDirector {
    enum class State { INIT, CONTROL, SAVE_START, SAVE_BUSY, SAVE_SUCCESS, SAVE_FAIL, EXIT };

public:
    friend class SettingsScreen;
    friend class SaveErrorPanel;

    SettingsDirector()
        : TDirector(), mState(State::INIT), mDisplay(nullptr), mController(nullptr) {}
    ~SettingsDirector() override;

    s32 direct() override;
    void setup(JDrama::TDisplay *, TMarioGamePad *);

private:
    s32 exit();
    void initialize();
    void initializeDramaHierarchy();
    void initializeSettingsLayout();
    void initializeErrorLayout();
    void saveSettings();
    void saveSettings_();
    void failSave(int errorcode);

    static const char *getErrorString(int errorcode);
    static void *saveThreadFunc(void *);
    static void *setupThreadFunc(void *);

private:
    State mState;
    int mErrorCode;
    JDrama::TDisplay *mDisplay;
    TMarioGamePad *mController;
    SettingsScreen *mSettingScreen;
    SaveErrorPanel *mSaveErrorPanel;
    TSelectGrad *mGradBG;
};

class SettingsScreen : public JDrama::TViewObj {
public:
    friend class SettingsDirector;

    SettingsScreen(TMarioGamePad *controller)
        : TViewObj("<SettingsScreen>"),
          mScreen(nullptr), mController(controller), mShineIcon(nullptr), mCurrentTextBox(nullptr), mGroupID(0),
          mSettingID(0), mGroups() {
        mShineAnimator = SimpleTexAnimator(sLoadingIconTIMGs, 16);
    }

    ~SettingsScreen() override {}

    void perform(u32 flags, JDrama::TGraphics *graphics) override {
        if ((flags & 0x1)) {
            processInput();
        }

        if ((flags & 0x3)) {
            const u32 groupMagic = ('p' << 24) | mGroupID;
            J2DPane *groupPane   = mScreen->search(groupMagic);
            if (!groupPane)
                return;

            if (groupPane->mChildrenList.mSize == 0) {
                //mShineIcon->mIsVisible = false;
                mCurrentTextBox        = nullptr;
                return;
            }

            //mShineIcon->mIsVisible = true;

            const u32 settingMagic = ('s' << 24) | mSettingID;
            J2DPane *settingPane   = groupPane->search(settingMagic);
            if (!settingPane)
                return;

            const u32 settingBackMagic = ('b' << 24) | mSettingID;
            J2DPane *settingBackPane   = groupPane->search(settingBackMagic);
            if (!settingBackPane)
                return;

            if (mCurrentTextBox != settingPane) {
                //mShineIcon->move(settingPane->mRect.mX1 - 32, settingPane->mRect.mY1);
                if (mCurrentTextBox) {
                    mCurrentTextBox->mGradientTop    = {255, 255, 255, 255};
                    mCurrentTextBox->mGradientBottom = {255, 255, 255, 255};
                }
                mCurrentTextBox                  = reinterpret_cast<J2DTextBox *>(settingPane);
                mCurrentTextBox->mGradientTop    = {180, 230, 10, 255};
                mCurrentTextBox->mGradientBottom = {240, 170, 10, 255};
            }

            /*mShineAnimator.process(mShineIcon);*/
        }

        if ((flags & 0x8)) {
            ReInitializeGX();
            SMS_DrawInit();

            J2DOrthoGraph ortho(0, 0, BetterSMS::getScreenOrthoWidth(), SMSGetTitleRenderHeight());
            ortho.setup2D();

            mScreen->draw(0, 0, &ortho);
        }
    }

private:
    void processInput() {
        {
            auto currentID = mSettingID;

            if ((mController->mButtons.mRapidInput & (TMarioGamePad::DPAD_DOWN | TMarioGamePad::MAINSTICK_DOWN))) {
                for (int i = mSettingID + 1; i < mCurrentGroupInfo->mSettingInfos.size(); ++i) {
                    auto *settingInfo = getSettingInfo(i);
                    if (settingInfo->mSettingData->isUserEditable()) {
                        mCurrentSettingInfo = settingInfo;
                        mSettingID          = i;
                        break;
                    }
                }
            }
            if ((mController->mButtons.mRapidInput & (TMarioGamePad::DPAD_UP |
                 TMarioGamePad::MAINSTICK_UP))) {
                for (int i = mSettingID - 1; i >= 0; --i) {
                    auto *settingInfo = getSettingInfo(i);
                    if (settingInfo->mSettingData->isUserEditable()) {
                        mCurrentSettingInfo = settingInfo;
                        mSettingID          = i;
                        break;
                    }
                }
            }
        }

        if (mController->mButtons.mRapidInput &
            (TMarioGamePad::DPAD_RIGHT | TMarioGamePad::MAINSTICK_RIGHT)) {
            mCurrentSettingInfo->mSettingData->nextValue();
            {
                char valueTextBuf[40];
                mCurrentSettingInfo->mSettingData->getValueStr(valueTextBuf);

                snprintf(mCurrentSettingInfo->mSettingTextBox->mStrPtr, 100, "%s: %s",
                         mCurrentSettingInfo->mSettingData->getName(), valueTextBuf);
            }
        }

        if (mController->mButtons.mRapidInput & (TMarioGamePad::DPAD_LEFT |
            TMarioGamePad::MAINSTICK_LEFT)) {
            mCurrentSettingInfo->mSettingData->prevValue();
            {
                char valueTextBuf[40];
                mCurrentSettingInfo->mSettingData->getValueStr(valueTextBuf);

                snprintf(mCurrentSettingInfo->mSettingTextBox->mStrPtr, 100, "%s: %s",
                         mCurrentSettingInfo->mSettingData->getName(), valueTextBuf);
            }
        }

        {
            auto oldID = mGroupID;

            if ((mController->mButtons.mFrameInput & TMarioGamePad::R)) {
                mGroupID += 1;
                if (mGroupID >= mGroups.size())
                    mGroupID = mGroups.size() - 1;
            }
            if ((mController->mButtons.mFrameInput & TMarioGamePad::L)) {
                mGroupID -= 1;
                if (mGroupID < 0)
                    mGroupID = 0;
            }

            if (oldID != mGroupID) {
                mCurrentGroupInfo->mGroupPane->mIsVisible = false;
                mCurrentGroupInfo = getGroupInfo(mGroupID);
                mCurrentGroupInfo->mGroupPane->mIsVisible = true;
                mCurrentSettingInfo = getSettingInfo(0);
                mSettingID          = 0;
            }
        }
    }

    GroupInfo *getGroupInfo(u32 index) {
        auto it = mGroups.begin();
        for (int i = 0; i < mGroups.size(); ++i, ++it) {
            if (i == index)
                return *it;
        }
        return nullptr;
    }

    SettingInfo *getSettingInfo(u32 index) {
        auto it = mCurrentGroupInfo->mSettingInfos.begin();
        for (int i = 0; i < mCurrentGroupInfo->mSettingInfos.size(); ++i, ++it) {
            if (i == index)
                return *it;
        }
        return nullptr;
    }

    s32 mGroupID;
    s32 mSettingID;
    TMarioGamePad *mController;
    J2DScreen *mScreen;
    J2DPicture *mShineIcon;
    J2DTextBox *mCurrentTextBox;
    GroupInfo *mCurrentGroupInfo;
    SettingInfo *mCurrentSettingInfo;
    SimpleTexAnimator mShineAnimator;
    JGadget::TList<GroupInfo *> mGroups;
};

class SaveErrorPanel : public JDrama::TViewObj {
public:
    friend class SettingsDirector;

    enum Choice { NO, YES };

    SaveErrorPanel(SettingsDirector *director, TMarioGamePad *controller)
        : TViewObj("<SettingsScreen>"), mChoice(0), mWhichScreen(0), mDirector(director), mScreen(nullptr),
          mErrorHandlerPane(nullptr), mSaveTryingPane(nullptr), mErrorTextBox(nullptr), mChoiceBoxes(), mController(controller) {
    }

    ~SaveErrorPanel() override {}

    void perform(u32 flags, JDrama::TGraphics *graphics) override {
        if ((flags & 0x1)) {
            processInput();
        }

        if ((flags & 0x3)) {
            J2DTextBox *selectedTB   = mChoiceBoxes[mChoice];
            J2DTextBox *unselectedTB = mChoiceBoxes[mChoice ^ 1];

            selectedTB->mGradientTop    = {180, 230, 10, 255};
            selectedTB->mGradientBottom = {240, 170, 10, 255};
            unselectedTB->mGradientTop    = {255, 255, 255, 255};
            unselectedTB->mGradientBottom = {255, 255, 255, 255};
        }

        if ((flags & 0x8)) {
            ReInitializeGX();
            SMS_DrawInit();

            J2DOrthoGraph ortho(0, 0, BetterSMS::getScreenOrthoWidth(), SMSGetTitleRenderHeight());
            ortho.setup2D();

            mAnimatedPane->update();
            mScreen->draw(0, 0, &ortho);
        }
    }

    void appear() {
        const s32 midX = getScreenRenderWidth() / 2;
        mAnimatedPane->setPanePosition(5, {100, 480}, {100, 200}, {100, 98});
        mAnimatedPane->startAnimation();
    }

    void disappear() {
        const s32 midX = getScreenRenderWidth() / 2;
        mAnimatedPane->setPanePosition(5, {100, 98}, {100, 200}, {100, 480});
        mAnimatedPane->startAnimation();
    }

    bool isWithinScreen() const { return mAnimatedPane->mRect.mY1 >= 480; }

private:
    void switchScreen() { 
        mWhichScreen ^= 1;
        if (mWhichScreen == 0) {
            mErrorHandlerPane->mIsVisible = false;
            mSaveTryingPane->mIsVisible   = true;
        } else {
            mErrorHandlerPane->mIsVisible = true;
            mSaveTryingPane->mIsVisible   = false;
        }
    }

    void processInput() {
        if (mWhichScreen != 1)
            return;

        if ((mController->mButtons.mFrameInput & TMarioGamePad::A)) {
            switch (mChoice) {
            case Choice::NO: {
                mDirector->mState = SettingsDirector::State::SAVE_FAIL;
                disappear();
                return;
            }
            case Choice::YES: {
                mDirector->mState = SettingsDirector::State::SAVE_START;
                switchScreen();
                return;
            }
            }
        }

        if ((mController->mButtons.mRapidInput & (TMarioGamePad::DPAD_RIGHT |
             TMarioGamePad::MAINSTICK_RIGHT)))
            mChoice ^= 1;

        if ((mController->mButtons.mRapidInput & (TMarioGamePad::DPAD_LEFT |
             TMarioGamePad::MAINSTICK_LEFT)))
            mChoice ^= 1;
    }

    s32 mChoice;
    s32 mWhichScreen;
    TBoundPane *mAnimatedPane;
    SettingsDirector *mDirector;
    TMarioGamePad *mController;
    J2DScreen *mScreen;
    J2DPane *mErrorHandlerPane;
    J2DPane *mSaveTryingPane;
    J2DTextBox *mErrorTextBox;
    J2DTextBox *mChoiceBoxes[2];
};

class RumbleSetting final : public Settings::SwitchSetting {
public:
    RumbleSetting(const char *name) : SwitchSetting(name, &RumbleSetting::sRumbleFlag) {
        mValueChangedCB = RumbleSetting::valueChanged;
    }

private:
    static void valueChanged(void *old, void *cur, ValueKind kind) {
        auto flag = *reinterpret_cast<bool *>(cur);
        TFlagManager::smInstance->setBool(!flag, 0x70000);
        TFlagManager::smInstance->setBool(flag, 0x90000);
    }

    static bool sRumbleFlag;
};

class SubtitleSetting final : public Settings::SwitchSetting {
public:
    SubtitleSetting(const char *name) : SwitchSetting(name, &SubtitleSetting::sSubtitleFlag) {
        mValueChangedCB = SubtitleSetting::valueChanged;
    }

private:
    static void valueChanged(void *old, void *cur, ValueKind kind) {
        auto flag = *reinterpret_cast<bool *>(cur);
        TFlagManager::smInstance->setBool(!flag, 0x70002);
        TFlagManager::smInstance->setBool(flag, 0x90001);
    }

    static bool sSubtitleFlag;
};

class SoundSetting final : public Settings::IntSetting {
public:
    enum Kind { MONO, STEREO, SURROUND };

    SoundSetting(const char *name) : IntSetting(name, &SoundSetting::sSoundValue) {
        mValueRange = {0, 2, 1};
        mValueChangedCB = SoundSetting::valueChanged;
    }
    ~SoundSetting() override {}

    void getValueStr(char *dst) const override {
        switch (getInt()) {
        case Kind::MONO: 
            strncpy(dst, "MONO", 5);
            break;
        case Kind::STEREO:
            strncpy(dst, "STEREO", 7);
            break;
        case Kind::SURROUND:
            strncpy(dst, "SURROUND", 9);
            break;
        default:
            strncpy(dst, "UNKNOWN", 8);
        }
    }

private:
    static void valueChanged(void *old, void *cur, ValueKind kind) {
        auto soundMode = *reinterpret_cast<int *>(cur);
        TFlagManager::smInstance->setFlag(0xA0000, soundMode);
        TFlagManager::smInstance->setBool(soundMode == Kind::SURROUND, 0x70001);
    }

    static int sSoundValue;
};

class AspectRatioSetting final : public Settings::IntSetting {
public:
    enum Kind { FULL, WIDE, ULTRAWIDE };

    AspectRatioSetting(const char *name) : IntSetting(name, &AspectRatioSetting::sAspectRatioValue) {
        mValueRange     = {0, 2, 1};
    }
    ~AspectRatioSetting() override {}

    void getValueStr(char *dst) const override {
        switch (getInt()) {
        default:
        case Kind::FULL:
            strncpy(dst, "4:3", 4);
            break;
        case Kind::WIDE:
            strncpy(dst, "16:9", 5);
            break;
        case Kind::ULTRAWIDE:
            strncpy(dst, "21:9", 5);
            break;
        }
    }

private:
    static int sAspectRatioValue;
};

class FPSSetting final : public Settings::IntSetting {
public:
    enum Kind { FPS_30, FPS_60, FPS_120 };

    FPSSetting(const char *name) : IntSetting(name, &FPSSetting::sFPSValue) {
        mValueRange = {0, 1, 1};
    }
    ~FPSSetting() override {}

    void getValueStr(char *dst) const override {
        switch (getInt()) {
        default:
        case Kind::FPS_30:
            strncpy(dst, SMS_PORT_REGION("30 FPS", "25 FPS", "30 FPS", "30 FPS"), 7);
            break;
        case Kind::FPS_60:
            strncpy(dst, SMS_PORT_REGION("60 FPS", "50 FPS", "60 FPS", "60 FPS"), 7);
            break;
        case Kind::FPS_120:
            strncpy(dst, SMS_PORT_REGION("120 FPS", "100 FPS", "120 FPS", "120 FPS"), 8);
            break;
        }
    }

private:
    static int sFPSValue;
};

class BugsSetting final : public Settings::SwitchSetting {
public:
    BugsSetting(const char *name) : SwitchSetting(name, &BugsSetting::sBugsValue) {
        mValueRange = {0, 1, 1};
    }
    ~BugsSetting() override {}

    bool isUnlocked() const override { return sIsUnlocked; }

    void load(JSUMemoryInputStream &in) override {
        in.read(&sIsUnlocked, 1);
        {
            bool b;
            in.read(&b, 1);
            setBool(b);
        }
    }
    void save(JSUMemoryOutputStream &out) override {
        out.write(&sIsUnlocked, 1);
        out.write(mValuePtr, 1);
    }

    inline void lock() { sIsUnlocked = false; }
    inline void unlock() { sIsUnlocked = true; }

private:
    static bool sIsUnlocked;
    static bool sBugsValue;
};

namespace BetterSMS {
    bool areBugsPatched();
    bool isCameraInvertedX();
    bool isCameraInvertedY();
}